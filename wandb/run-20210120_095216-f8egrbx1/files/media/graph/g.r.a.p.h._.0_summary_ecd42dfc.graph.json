{"format": "torch", "nodes": [{"name": "encoder", "id": 140548708235856, "class_name": "CAVE(\n  (_audio_feature_model): AudioFeatureModel(\n    (conv1): Conv1d(128, 512, kernel_size=(2,), stride=(2,))\n    (conv2): Conv1d(512, 512, kernel_size=(2,), stride=(2,))\n    (pool1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (drop): Dropout(p=0.1, inplace=False)\n    (relu): ReLU()\n    (tanh): Tanh()\n    (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (ln): LayerNorm((512, 300), eps=1e-05, elementwise_affine=True)\n    (audio_conv): Sequential(\n      (0): Conv1d(128, 512, kernel_size=(2,), stride=(2,))\n      (1): Conv1d(512, 512, kernel_size=(2,), stride=(2,))\n      (2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (3): ReLU()\n      (4): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (5): Dropout(p=0.1, inplace=False)\n    )\n  )\n  (_video_feature_model): VideoFeatureModel(\n    (resnet_model): ResNet(\n      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (layer1): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (layer2): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (layer3): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (layer4): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n      (fc): Linear(in_features=512, out_features=1000, bias=True)\n    )\n    (feature_model): Sequential(\n      (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (4): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (5): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (6): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (7): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n    )\n  )\n  (_audio_input_projection): Sequential(\n    (0): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (1): Linear(in_features=512, out_features=128, bias=True)\n    (2): ReLU()\n  )\n  (_video_input_projection): Sequential(\n    (0): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (1): Linear(in_features=512, out_features=128, bias=True)\n    (2): ReLU()\n  )\n  (_encoder_layer): TransformerEncoderLayer(\n    (self_attn): MultiheadAttention(\n      (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)\n    )\n    (linear1): Linear(in_features=128, out_features=128, bias=True)\n    (dropout): Dropout(p=0.1, inplace=False)\n    (linear2): Linear(in_features=128, out_features=128, bias=True)\n    (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n    (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n    (dropout1): Dropout(p=0.1, inplace=False)\n    (dropout2): Dropout(p=0.1, inplace=False)\n  )\n  (_audio_encoder): TransformerEncoder(\n    (layers): ModuleList(\n      (0): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)\n        )\n        (linear1): Linear(in_features=128, out_features=128, bias=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n        (linear2): Linear(in_features=128, out_features=128, bias=True)\n        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.1, inplace=False)\n        (dropout2): Dropout(p=0.1, inplace=False)\n      )\n      (1): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)\n        )\n        (linear1): Linear(in_features=128, out_features=128, bias=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n        (linear2): Linear(in_features=128, out_features=128, bias=True)\n        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.1, inplace=False)\n        (dropout2): Dropout(p=0.1, inplace=False)\n      )\n      (2): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)\n        )\n        (linear1): Linear(in_features=128, out_features=128, bias=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n        (linear2): Linear(in_features=128, out_features=128, bias=True)\n        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.1, inplace=False)\n        (dropout2): Dropout(p=0.1, inplace=False)\n      )\n      (3): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)\n        )\n        (linear1): Linear(in_features=128, out_features=128, bias=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n        (linear2): Linear(in_features=128, out_features=128, bias=True)\n        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.1, inplace=False)\n        (dropout2): Dropout(p=0.1, inplace=False)\n      )\n    )\n  )\n  (_video_encoder): TransformerEncoder(\n    (layers): ModuleList(\n      (0): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)\n        )\n        (linear1): Linear(in_features=128, out_features=128, bias=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n        (linear2): Linear(in_features=128, out_features=128, bias=True)\n        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.1, inplace=False)\n        (dropout2): Dropout(p=0.1, inplace=False)\n      )\n      (1): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)\n        )\n        (linear1): Linear(in_features=128, out_features=128, bias=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n        (linear2): Linear(in_features=128, out_features=128, bias=True)\n        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.1, inplace=False)\n        (dropout2): Dropout(p=0.1, inplace=False)\n      )\n      (2): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)\n        )\n        (linear1): Linear(in_features=128, out_features=128, bias=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n        (linear2): Linear(in_features=128, out_features=128, bias=True)\n        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.1, inplace=False)\n        (dropout2): Dropout(p=0.1, inplace=False)\n      )\n      (3): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): _LinearWithBias(in_features=128, out_features=128, bias=True)\n        )\n        (linear1): Linear(in_features=128, out_features=128, bias=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n        (linear2): Linear(in_features=128, out_features=128, bias=True)\n        (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.1, inplace=False)\n        (dropout2): Dropout(p=0.1, inplace=False)\n      )\n    )\n  )\n  (_audio_representation_mlp): Sequential(\n    (0): Linear(in_features=128, out_features=128, bias=True)\n    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (2): ReLU()\n    (3): Linear(in_features=128, out_features=128, bias=True)\n  )\n  (_video_representation_mlp): Sequential(\n    (0): Linear(in_features=128, out_features=128, bias=True)\n    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (2): ReLU()\n    (3): Linear(in_features=128, out_features=128, bias=True)\n  )\n)", "parameters": [["_audio_feature_model.conv1.weight", [512, 128, 2]], ["_audio_feature_model.conv1.bias", [512]], ["_audio_feature_model.conv2.weight", [512, 512, 2]], ["_audio_feature_model.conv2.bias", [512]], ["_audio_feature_model.bn.weight", [512]], ["_audio_feature_model.bn.bias", [512]], ["_audio_feature_model.ln.weight", [512, 300]], ["_audio_feature_model.ln.bias", [512, 300]], ["_video_feature_model.resnet_model.conv1.weight", [64, 3, 7, 7]], ["_video_feature_model.resnet_model.bn1.weight", [64]], ["_video_feature_model.resnet_model.bn1.bias", [64]], ["_video_feature_model.resnet_model.layer1.0.conv1.weight", [64, 64, 3, 3]], ["_video_feature_model.resnet_model.layer1.0.bn1.weight", [64]], ["_video_feature_model.resnet_model.layer1.0.bn1.bias", [64]], ["_video_feature_model.resnet_model.layer1.0.conv2.weight", [64, 64, 3, 3]], ["_video_feature_model.resnet_model.layer1.0.bn2.weight", [64]], ["_video_feature_model.resnet_model.layer1.0.bn2.bias", [64]], ["_video_feature_model.resnet_model.layer1.1.conv1.weight", [64, 64, 3, 3]], ["_video_feature_model.resnet_model.layer1.1.bn1.weight", [64]], ["_video_feature_model.resnet_model.layer1.1.bn1.bias", [64]], ["_video_feature_model.resnet_model.layer1.1.conv2.weight", [64, 64, 3, 3]], ["_video_feature_model.resnet_model.layer1.1.bn2.weight", [64]], ["_video_feature_model.resnet_model.layer1.1.bn2.bias", [64]], ["_video_feature_model.resnet_model.layer2.0.conv1.weight", [128, 64, 3, 3]], ["_video_feature_model.resnet_model.layer2.0.bn1.weight", [128]], ["_video_feature_model.resnet_model.layer2.0.bn1.bias", [128]], ["_video_feature_model.resnet_model.layer2.0.conv2.weight", [128, 128, 3, 3]], ["_video_feature_model.resnet_model.layer2.0.bn2.weight", [128]], ["_video_feature_model.resnet_model.layer2.0.bn2.bias", [128]], ["_video_feature_model.resnet_model.layer2.0.downsample.0.weight", [128, 64, 1, 1]], ["_video_feature_model.resnet_model.layer2.0.downsample.1.weight", [128]], ["_video_feature_model.resnet_model.layer2.0.downsample.1.bias", [128]], ["_video_feature_model.resnet_model.layer2.1.conv1.weight", [128, 128, 3, 3]], ["_video_feature_model.resnet_model.layer2.1.bn1.weight", [128]], ["_video_feature_model.resnet_model.layer2.1.bn1.bias", [128]], ["_video_feature_model.resnet_model.layer2.1.conv2.weight", [128, 128, 3, 3]], ["_video_feature_model.resnet_model.layer2.1.bn2.weight", [128]], ["_video_feature_model.resnet_model.layer2.1.bn2.bias", [128]], ["_video_feature_model.resnet_model.layer3.0.conv1.weight", [256, 128, 3, 3]], ["_video_feature_model.resnet_model.layer3.0.bn1.weight", [256]], ["_video_feature_model.resnet_model.layer3.0.bn1.bias", [256]], ["_video_feature_model.resnet_model.layer3.0.conv2.weight", [256, 256, 3, 3]], ["_video_feature_model.resnet_model.layer3.0.bn2.weight", [256]], ["_video_feature_model.resnet_model.layer3.0.bn2.bias", [256]], ["_video_feature_model.resnet_model.layer3.0.downsample.0.weight", [256, 128, 1, 1]], ["_video_feature_model.resnet_model.layer3.0.downsample.1.weight", [256]], ["_video_feature_model.resnet_model.layer3.0.downsample.1.bias", [256]], ["_video_feature_model.resnet_model.layer3.1.conv1.weight", [256, 256, 3, 3]], ["_video_feature_model.resnet_model.layer3.1.bn1.weight", [256]], ["_video_feature_model.resnet_model.layer3.1.bn1.bias", [256]], ["_video_feature_model.resnet_model.layer3.1.conv2.weight", [256, 256, 3, 3]], ["_video_feature_model.resnet_model.layer3.1.bn2.weight", [256]], ["_video_feature_model.resnet_model.layer3.1.bn2.bias", [256]], ["_video_feature_model.resnet_model.layer4.0.conv1.weight", [512, 256, 3, 3]], ["_video_feature_model.resnet_model.layer4.0.bn1.weight", [512]], ["_video_feature_model.resnet_model.layer4.0.bn1.bias", [512]], ["_video_feature_model.resnet_model.layer4.0.conv2.weight", [512, 512, 3, 3]], ["_video_feature_model.resnet_model.layer4.0.bn2.weight", [512]], ["_video_feature_model.resnet_model.layer4.0.bn2.bias", [512]], ["_video_feature_model.resnet_model.layer4.0.downsample.0.weight", [512, 256, 1, 1]], ["_video_feature_model.resnet_model.layer4.0.downsample.1.weight", [512]], ["_video_feature_model.resnet_model.layer4.0.downsample.1.bias", [512]], ["_video_feature_model.resnet_model.layer4.1.conv1.weight", [512, 512, 3, 3]], ["_video_feature_model.resnet_model.layer4.1.bn1.weight", [512]], ["_video_feature_model.resnet_model.layer4.1.bn1.bias", [512]], ["_video_feature_model.resnet_model.layer4.1.conv2.weight", [512, 512, 3, 3]], ["_video_feature_model.resnet_model.layer4.1.bn2.weight", [512]], ["_video_feature_model.resnet_model.layer4.1.bn2.bias", [512]], ["_video_feature_model.resnet_model.fc.weight", [1000, 512]], ["_video_feature_model.resnet_model.fc.bias", [1000]], ["_audio_input_projection.0.weight", [512]], ["_audio_input_projection.0.bias", [512]], ["_audio_input_projection.1.weight", [128, 512]], ["_audio_input_projection.1.bias", [128]], ["_video_input_projection.0.weight", [512]], ["_video_input_projection.0.bias", [512]], ["_video_input_projection.1.weight", [128, 512]], ["_video_input_projection.1.bias", [128]], ["_encoder_layer.self_attn.in_proj_weight", [384, 128]], ["_encoder_layer.self_attn.in_proj_bias", [384]], ["_encoder_layer.self_attn.out_proj.weight", [128, 128]], ["_encoder_layer.self_attn.out_proj.bias", [128]], ["_encoder_layer.linear1.weight", [128, 128]], ["_encoder_layer.linear1.bias", [128]], ["_encoder_layer.linear2.weight", [128, 128]], ["_encoder_layer.linear2.bias", [128]], ["_encoder_layer.norm1.weight", [128]], ["_encoder_layer.norm1.bias", [128]], ["_encoder_layer.norm2.weight", [128]], ["_encoder_layer.norm2.bias", [128]], ["_audio_encoder.layers.0.self_attn.in_proj_weight", [384, 128]], ["_audio_encoder.layers.0.self_attn.in_proj_bias", [384]], ["_audio_encoder.layers.0.self_attn.out_proj.weight", [128, 128]], ["_audio_encoder.layers.0.self_attn.out_proj.bias", [128]], ["_audio_encoder.layers.0.linear1.weight", [128, 128]], ["_audio_encoder.layers.0.linear1.bias", [128]], ["_audio_encoder.layers.0.linear2.weight", [128, 128]], ["_audio_encoder.layers.0.linear2.bias", [128]], ["_audio_encoder.layers.0.norm1.weight", [128]], ["_audio_encoder.layers.0.norm1.bias", [128]], ["_audio_encoder.layers.0.norm2.weight", [128]], ["_audio_encoder.layers.0.norm2.bias", [128]], ["_audio_encoder.layers.1.self_attn.in_proj_weight", [384, 128]], ["_audio_encoder.layers.1.self_attn.in_proj_bias", [384]], ["_audio_encoder.layers.1.self_attn.out_proj.weight", [128, 128]], ["_audio_encoder.layers.1.self_attn.out_proj.bias", [128]], ["_audio_encoder.layers.1.linear1.weight", [128, 128]], ["_audio_encoder.layers.1.linear1.bias", [128]], ["_audio_encoder.layers.1.linear2.weight", [128, 128]], ["_audio_encoder.layers.1.linear2.bias", [128]], ["_audio_encoder.layers.1.norm1.weight", [128]], ["_audio_encoder.layers.1.norm1.bias", [128]], ["_audio_encoder.layers.1.norm2.weight", [128]], ["_audio_encoder.layers.1.norm2.bias", [128]], ["_audio_encoder.layers.2.self_attn.in_proj_weight", [384, 128]], ["_audio_encoder.layers.2.self_attn.in_proj_bias", [384]], ["_audio_encoder.layers.2.self_attn.out_proj.weight", [128, 128]], ["_audio_encoder.layers.2.self_attn.out_proj.bias", [128]], ["_audio_encoder.layers.2.linear1.weight", [128, 128]], ["_audio_encoder.layers.2.linear1.bias", [128]], ["_audio_encoder.layers.2.linear2.weight", [128, 128]], ["_audio_encoder.layers.2.linear2.bias", [128]], ["_audio_encoder.layers.2.norm1.weight", [128]], ["_audio_encoder.layers.2.norm1.bias", [128]], ["_audio_encoder.layers.2.norm2.weight", [128]], ["_audio_encoder.layers.2.norm2.bias", [128]], ["_audio_encoder.layers.3.self_attn.in_proj_weight", [384, 128]], ["_audio_encoder.layers.3.self_attn.in_proj_bias", [384]], ["_audio_encoder.layers.3.self_attn.out_proj.weight", [128, 128]], ["_audio_encoder.layers.3.self_attn.out_proj.bias", [128]], ["_audio_encoder.layers.3.linear1.weight", [128, 128]], ["_audio_encoder.layers.3.linear1.bias", [128]], ["_audio_encoder.layers.3.linear2.weight", [128, 128]], ["_audio_encoder.layers.3.linear2.bias", [128]], ["_audio_encoder.layers.3.norm1.weight", [128]], ["_audio_encoder.layers.3.norm1.bias", [128]], ["_audio_encoder.layers.3.norm2.weight", [128]], ["_audio_encoder.layers.3.norm2.bias", [128]], ["_video_encoder.layers.0.self_attn.in_proj_weight", [384, 128]], ["_video_encoder.layers.0.self_attn.in_proj_bias", [384]], ["_video_encoder.layers.0.self_attn.out_proj.weight", [128, 128]], ["_video_encoder.layers.0.self_attn.out_proj.bias", [128]], ["_video_encoder.layers.0.linear1.weight", [128, 128]], ["_video_encoder.layers.0.linear1.bias", [128]], ["_video_encoder.layers.0.linear2.weight", [128, 128]], ["_video_encoder.layers.0.linear2.bias", [128]], ["_video_encoder.layers.0.norm1.weight", [128]], ["_video_encoder.layers.0.norm1.bias", [128]], ["_video_encoder.layers.0.norm2.weight", [128]], ["_video_encoder.layers.0.norm2.bias", [128]], ["_video_encoder.layers.1.self_attn.in_proj_weight", [384, 128]], ["_video_encoder.layers.1.self_attn.in_proj_bias", [384]], ["_video_encoder.layers.1.self_attn.out_proj.weight", [128, 128]], ["_video_encoder.layers.1.self_attn.out_proj.bias", [128]], ["_video_encoder.layers.1.linear1.weight", [128, 128]], ["_video_encoder.layers.1.linear1.bias", [128]], ["_video_encoder.layers.1.linear2.weight", [128, 128]], ["_video_encoder.layers.1.linear2.bias", [128]], ["_video_encoder.layers.1.norm1.weight", [128]], ["_video_encoder.layers.1.norm1.bias", [128]], ["_video_encoder.layers.1.norm2.weight", [128]], ["_video_encoder.layers.1.norm2.bias", [128]], ["_video_encoder.layers.2.self_attn.in_proj_weight", [384, 128]], ["_video_encoder.layers.2.self_attn.in_proj_bias", [384]], ["_video_encoder.layers.2.self_attn.out_proj.weight", [128, 128]], ["_video_encoder.layers.2.self_attn.out_proj.bias", [128]], ["_video_encoder.layers.2.linear1.weight", [128, 128]], ["_video_encoder.layers.2.linear1.bias", [128]], ["_video_encoder.layers.2.linear2.weight", [128, 128]], ["_video_encoder.layers.2.linear2.bias", [128]], ["_video_encoder.layers.2.norm1.weight", [128]], ["_video_encoder.layers.2.norm1.bias", [128]], ["_video_encoder.layers.2.norm2.weight", [128]], ["_video_encoder.layers.2.norm2.bias", [128]], ["_video_encoder.layers.3.self_attn.in_proj_weight", [384, 128]], ["_video_encoder.layers.3.self_attn.in_proj_bias", [384]], ["_video_encoder.layers.3.self_attn.out_proj.weight", [128, 128]], ["_video_encoder.layers.3.self_attn.out_proj.bias", [128]], ["_video_encoder.layers.3.linear1.weight", [128, 128]], ["_video_encoder.layers.3.linear1.bias", [128]], ["_video_encoder.layers.3.linear2.weight", [128, 128]], ["_video_encoder.layers.3.linear2.bias", [128]], ["_video_encoder.layers.3.norm1.weight", [128]], ["_video_encoder.layers.3.norm1.bias", [128]], ["_video_encoder.layers.3.norm2.weight", [128]], ["_video_encoder.layers.3.norm2.bias", [128]], ["_audio_representation_mlp.0.weight", [128, 128]], ["_audio_representation_mlp.0.bias", [128]], ["_audio_representation_mlp.1.weight", [128]], ["_audio_representation_mlp.1.bias", [128]], ["_audio_representation_mlp.3.weight", [128, 128]], ["_audio_representation_mlp.3.bias", [128]], ["_video_representation_mlp.0.weight", [128, 128]], ["_video_representation_mlp.0.bias", [128]], ["_video_representation_mlp.1.weight", [128]], ["_video_representation_mlp.1.bias", [128]], ["_video_representation_mlp.3.weight", [128, 128]], ["_video_representation_mlp.3.bias", [128]]], "output_shape": [[5, 128], [5, 128]], "num_parameters": [131072, 512, 524288, 512, 512, 512, 153600, 153600, 9408, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 73728, 128, 128, 147456, 128, 128, 8192, 128, 128, 147456, 128, 128, 147456, 128, 128, 294912, 256, 256, 589824, 256, 256, 32768, 256, 256, 589824, 256, 256, 589824, 256, 256, 1179648, 512, 512, 2359296, 512, 512, 131072, 512, 512, 2359296, 512, 512, 2359296, 512, 512, 512000, 1000, 512, 512, 65536, 128, 512, 512, 65536, 128, 49152, 384, 16384, 128, 16384, 128, 16384, 128, 128, 128, 128, 128, 49152, 384, 16384, 128, 16384, 128, 16384, 128, 128, 128, 128, 128, 49152, 384, 16384, 128, 16384, 128, 16384, 128, 128, 128, 128, 128, 49152, 384, 16384, 128, 16384, 128, 16384, 128, 128, 128, 128, 128, 49152, 384, 16384, 128, 16384, 128, 16384, 128, 128, 128, 128, 128, 49152, 384, 16384, 128, 16384, 128, 16384, 128, 128, 128, 128, 128, 49152, 384, 16384, 128, 16384, 128, 16384, 128, 128, 128, 128, 128, 49152, 384, 16384, 128, 16384, 128, 16384, 128, 128, 128, 128, 128, 49152, 384, 16384, 128, 16384, 128, 16384, 128, 128, 128, 128, 128, 16384, 128, 128, 128, 16384, 128, 16384, 128, 128, 128, 16384, 128]}], "edges": []}